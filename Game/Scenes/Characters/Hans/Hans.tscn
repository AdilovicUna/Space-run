[gd_scene load_steps=8 format=2]

[ext_resource path="res://Characters/Hans/Hans.gltf" type="PackedScene" id=1]
[ext_resource path="res://Characters/Hans/HansRunning.tres" type="Animation" id=2]
[ext_resource path="res://Characters/Hans/HansShooting.tres" type="Animation" id=3]
[ext_resource path="res://Scenes/Bullets/BulletZero.tscn" type="PackedScene" id=4]
[ext_resource path="res://Scenes/Bullets/BulletOne.tscn" type="PackedScene" id=5]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody

export(PackedScene) var BulletZero
export(PackedScene) var BulletOne

const max_bullets_per_button_press = 8

enum lvl {ONE, TWO, THREE}

onready var main = get_parent()
onready var ground = get_node(\"../Ground\")
onready var tunnels = get_node(\"../Tunnels\") # Tunnels
onready var tunnels_children = get_node(\"../Tunnels\").get_children() # lvl1, lvl2, lvl3
onready var score = get_node(\"../UI/Score\")
onready var end = get_node(\"../UI/End\")
onready var level = get_node(\"../UI/Level\")

var rand = RandomNumberGenerator.new()

var move_tunnel = lvl.ONE
var next_tunnel = lvl.TWO
var curr_tunnel = lvl.ONE

var speed = 50.0
var total_translation = 1250 # original entrence to the level2 tunnel
var x = rand.randi_range(1120,1190) # first trap for the next level will be here
var new_trap = 3650 # start producing traps for the next level at this point
var difference = 2500
var show_level = 0 # used to measure how long level lable should be displayed
var isShootingButtonPressed = false # indicates wheather Hans should shoot
var can_shoot = true
var bullets_in_air = 0

func _physics_process(_delta):
    # making tunnels (and ground) infinite by moving them forward
    # after Hans passes them	
    var tunnel = tunnels_children[move_tunnel]
    if translation.x < tunnel.translation.x - 2000:				
        tunnel.translation.x -= 7500    # move tunnel ahead (3x2500)
        move_tunnel = (move_tunnel + 1) % tunnels_children.size()
    if translation.x < ground.translation.x - 2000:
        ground.translation.x -= 3000 # move ground ahead
    
    # the game just started
    if show_level == 0:
         # show which level we are approaching
        show_level = translation.x
        level.update_level()
        level.show()
    
    if translation.x < total_translation:
        # update cur_tunnel Hans is running through
        total_translation -= 2500
        next_tunnel = (next_tunnel + 1) % tunnels_children.size()
        curr_tunnel = (curr_tunnel + 1) % tunnels_children.size()
        
        # show which level we are approaching
        show_level = translation.x
        level.update_level()
        level.show()
        # increase speed after a full lap
        if(curr_tunnel == lvl.ONE):
            speed += 15.0
            
        rand.randomize()
        # restart x
        x = rand.randi_range(1120,1190)
        
        difference -= 2500
    
    # Hans entered the new tunnel, hide the level label
    if level.visible and abs(translation.x - show_level) > 75:
        level.hide()        
        
    tunnels.delete_obstacle_until_x(curr_tunnel,translation.x - difference + 50)
    
    # create a trap in the next tunnel every 50 meters
    if translation.x < new_trap:
        new_trap -= 50
        if x > -1200:
            tunnels.create_one_obstacle(next_tunnel,x)
            
        # choose a place for the next obstacle
        # NOTE: level2 and level3 have bugs and viruses, so we want less obstacles 
        # a) we need more time to shoot down a bug or a virus
        # b) bugs and viruses are longer than traps thus take more space along x-axis
        # x -= rand.randi_range(70,90) if next_tunnel == lvl.ONE else rand.randi_range(170,190)
        x -= rand.randi_range(70,90) if next_tunnel == lvl.ONE else rand.randi_range(120,140)
    
    # updating score 
    score._on_Meter_Passed()
    
    # Hans's movement
    var velocity = Vector3.LEFT * speed
    velocity = move_and_slide(velocity)
    
    # End game if Hans touches the trap
    for index in get_slide_count():
        var collision = get_slide_collision(index)	
        if collision.collider is KinematicBody:
            main._game_over()
            return
    
    # bugs and viruses need to move torwards Hans
    # but not in the first tunnel    
    if curr_tunnel != lvl.ONE:
        tunnels.bug_virus_movement(curr_tunnel)
    
    if isShootingButtonPressed:
        shoot()

func get_current_tunnel():
    return curr_tunnel
  
func switch_animation():
    # toggle between Hans shooting and just running
    if Input.is_action_pressed(\"shoot\"):
        isShootingButtonPressed = true
        get_node(\"Pivot/Hans/Movement\").play(\"HansShooting\")
    else:
        isShootingButtonPressed = false
        bullets_in_air = 0        
        get_node(\"Pivot/Hans/Movement\").play(\"HansRunning\") 

func shoot():
    if bullets_in_air < max_bullets_per_button_press and can_shoot:
        
        var new_bullet = null
        
        if rand.randi_range(0,1) == 0:
            new_bullet = BulletZero.instance()
        else:
            new_bullet = BulletOne.instance()
            
        new_bullet.global_transform = $Muzzle.global_transform
        
        var scene_root = get_tree().get_root().get_children()
        scene_root[0].add_child(new_bullet)
        
        bullets_in_air += 1
        can_shoot = false
        
        $shooting_timer.start()        


func _on_shooting_timer_timeout():
    can_shoot = true
"

[sub_resource type="CapsuleShape" id=2]

[node name="Hans" type="KinematicBody"]
collision_mask = 2
script = SubResource( 1 )
BulletZero = ExtResource( 4 )
BulletOne = ExtResource( 5 )

[node name="Pivot" type="Spatial" parent="."]

[node name="Hans" parent="Pivot" instance=ExtResource( 1 )]

[node name="Movement" type="AnimationPlayer" parent="Pivot/Hans"]
autoplay = "HansRunning"
anims/HansRunning = ExtResource( 2 )
anims/HansShooting = ExtResource( 3 )

[node name="CollisionShape" type="CollisionShape" parent="."]
transform = Transform( 2.98112, 0, 0, 0, -0.07764, 4.00904, 0, -2.51225, -0.182664, 0, 6.87551, 1.04777 )
shape = SubResource( 2 )

[node name="Muzzle" type="Position3D" parent="."]
transform = Transform( -1.53095e-07, 5.57222e-08, 1, 0.34202, 0.939693, 0, -0.939693, 0.34202, -1.62921e-07, -2.19321, 7.48418, 3.44992 )
__meta__ = {
"_editor_description_": ""
}

[node name="shooting_timer" type="Timer" parent="."]
wait_time = 0.15
one_shot = true
[connection signal="timeout" from="shooting_timer" to="." method="_on_shooting_timer_timeout"]
